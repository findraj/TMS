/*******************************************************************************
 *                                                                              *
 *                         Brno University of Technology                        *
 *                       Faculty of Information Technology                      *
 *                                                                              *
 *                 A tone reproduction operator for all luminance               *
 *                   ranges considering human color perception                  *
 * 																			                                        *
 *                                 Bachelor thesis                              *
 *             Author: Jan Findra [xfindr01 AT stud.fit.vutbr.cz]               *
 *                                    Brno 2024                                 *
 *                                                                              *
 *******************************************************************************/

#include "TMO.h"

class TMOMikamo14 : public TMO
{
public:
  /**
   * @brief Constructor
   */
  TMOMikamo14();

  /**
   * @brief Destructor
   */
  virtual ~TMOMikamo14();

  /**
   * @brief Function to compute the B-spline basis function
   * @param x input value
   * @param k degree of the spline
   * @param i index of the knot vector
   * @param t knot vector
   * @return double: value of the B-spline basis function
   */
  double B(double x, int k, int i, const std::vector<double> &t);

  /**
   * @brief Function to compute the B-spline basis function
   * @param x input value
   * @param t knot vector
   * @param c control points
   * @param k degree of the spline
   * @return double: value of the B-spline basis function
   */
  double bspline(double x, const std::vector<double> &t, const std::vector<double> &c, int k);

  /**
   * @brief Function to get new color data based on the number of bins
   * @return double**: new color data
   */
  double **getNewColorData();

  /**
   * @brief Function to get new LMS sensitivities based on the number of bins
   * @return double**: new LMS sensitivities
   */
  double **getNewLMSSens();

  /**
   * @brief Function to get adapted retinal illuminance, from ari or al or
   * computed from the input image
   * @return double: adapted retinal illuminance
   */
  double getAdaptedRetinalIlluminance();

  /**
   * @brief Function to get discrimination parameters for given adapted retinal
   * illuminance
   * @param I adapted retinal illuminance
   * @return vector<double>: 9 discrimination parameters
   */
  std::vector<double> getDiscriminationParams(double I);

  /**
   * @brief Function to adjust the spectral sensitivities of the cones
   * @param i bin index
   * @param step number of bins to move the spectral sensitivity
   * @param cone cone index
   * @return double: adjusted spectral sensitivity
   */
  double lambdaAdjustment(double ***newLMSSens, int i, int step, int cone);

  /**
   * @brief Function to apply two-stage model to get opponent color values
   * @param spd spectral power distribution
   * @param I adapted retinal illuminance
   * @param params discrimination parameters
   * @return Mat: 3 opponent color values
   */
  cv::Mat applyTwoStageModel(double ***newLMSSens, std::vector<double> spd, double I, std::vector<double> params);

  /**
   * @brief Function to convert RGB values to spectral power distribution
   * @param red red value
   * @param green green value
   * @param blue blue value
   * @return vector<double>: spectral power distribution
   */
  std::vector<double> RGBtoSpectrum(double ***newColorData, double red, double green, double blue);

  /**
   * @brief Function to reduce luminance based on the average luminance and
   * maximum luminance
   * @param Y luminance
   * @param YLogAvg average luminance
   * @param Ymax maximum luminance
   * @return double: reduced luminance
   */
  double luminanceReduction(double Y, double YLogAvg, double Ymax);

  /**
   * @brief Function to apply the tone mapping operator
   * @return int: 0 = success, 1 = error
   */
  virtual int Transform();

  // visible spectrum boundries
  int lowerBound = 400;
  int upperBound = 700;
  // number of bins
  const static int bins = 60;
  // bin width
  const static int binWidth = 5; // range 400nm to 700nm divided into 60 bins => bin width = 5nm
  // number of colors
  const static int colors = 7;
  enum color
  {
    White,
    Cyan,
    Magenta,
    Yellow,
    Red,
    Green,
    Blue
  };

  // 60 bins of 7 colors on range 400nm to 700nm for Smits 1999 RGB to Spectrum conversion generated by the matlab code from https://github.com/colour-science/smits1999
  double color_data[bins][colors] = {
      {0.9995, 0.9703, 0.2142, 0.2777, 0.6313, -0.0334, 0.9720},
      {1.0013, 0.9721, 0.3887, 0.2994, 0.6520, -0.0105, 0.9561},
      {1.0018, 0.9845, 0.9113, 0.3806, 0.6224, 0.0112, 0.9091},
      {1.0006, 0.9925, 0.9012, 0.2443, 0.6743, -0.0263, 0.9092},
      {1.0008, 0.9922, 0.9414, 0.1521, 0.5648, -0.0235, 0.8897},
      {1.0016, 0.9893, 0.9681, 0.0482, 0.6219, -0.0251, 0.8884},
      {1.0017, 0.9836, 0.9756, 0.0237, 0.7586, -0.0227, 0.8853},
      {1.0013, 0.9887, 0.9928, -0.0292, 0.2722, -0.0369, 0.8850},
      {1.0008, 0.9653, 0.9755, -0.0058, -0.0328, -0.0404, 0.8857},
      {1.0006, 0.9628, 0.9976, -0.0000, -0.2480, -0.0311, 0.9024},
      {1.0020, 0.9587, 0.9767, 0.0020, -0.2510, 0.0103, 0.8837},
      {1.0008, 0.9615, 0.9866, 0.0764, -0.1679, 0.0335, 0.8836},
      {1.0014, 0.9684, 1.0040, 0.0569, -0.1692, 0.0750, 0.8858},
      {1.0013, 0.9807, 0.9846, 0.1002, -0.2675, 0.1357, 0.8957},
      {1.0011, 0.9777, 0.9171, 0.1675, -0.2103, 0.2082, 0.8885},
      {0.9998, 0.9845, 0.9209, 0.2122, -0.2075, 0.2919, 0.8936},
      {0.9998, 0.9957, 0.8055, 0.3464, -0.2446, 0.3824, 0.9316},
      {1.0007, 0.9985, 0.5175, 0.4405, -0.1837, 0.4772, 0.9111},
      {1.0001, 0.9994, 0.5928, 0.4954, -0.2100, 0.5703, 0.8782},
      {1.0010, 0.9968, 0.4076, 0.5450, -0.2768, 0.6606, 0.8255},
      {0.9990, 0.9977, 0.1033, 0.6066, -0.2334, 0.7438, 0.7530},
      {0.9981, 0.9979, -0.0362, 0.8987, -0.2330, 0.8167, 0.3213},
      {0.9966, 0.9957, -0.0580, 0.9980, -0.1850, 0.8789, 0.0598},
      {0.9962, 0.9847, 0.0166, 0.9725, -0.1608, 0.9266, -0.0726},
      {0.9989, 0.9977, 0.0361, 0.9419, -0.2517, 0.9630, 0.0006},
      {0.9989, 0.9943, -0.0087, 0.9828, -0.1897, 0.9851, -0.0460},
      {0.9980, 0.9989, 0.0075, 0.9900, -0.2224, 0.9910, -0.0606},
      {1.0000, 0.9979, -0.0380, 0.9861, -0.2311, 0.9995, -0.0000},
      {0.9996, 0.9865, -0.0405, 0.9852, -0.2318, 0.9967, -0.0414},
      {1.0010, 0.9952, -0.0410, 0.9874, -0.2805, 0.9945, -0.0544},
      {0.9998, 0.9905, -0.0169, 0.9913, -0.1254, 0.9902, -0.0463},
      {1.0009, 0.9966, 0.0059, 0.9848, 0.5486, 0.9791, -0.0057},
      {0.9990, 0.9967, -0.0118, 0.9913, 0.5297, 0.9649, -0.0075},
      {1.0009, 0.9671, -0.0200, 0.9941, 0.5557, 0.9614, -0.0403},
      {1.0004, 0.9257, 0.0364, 0.9932, 0.6620, 0.9491, 0.0034},
      {0.9997, 0.8478, 0.2153, 0.9915, 0.5765, 0.7988, -0.0759},
      {1.0008, 0.8103, 0.4798, 0.9858, 0.6076, 0.6535, -0.0366},
      {1.0007, 0.5934, 0.7404, 0.9885, 0.7023, 0.5134, -0.0549},
      {1.0008, 0.4266, 0.9159, 0.9928, 0.6290, 0.3811, -0.0691},
      {1.0005, 0.2703, 0.9704, 0.9828, 0.7426, 0.2668, -0.0532},
      {0.9976, 0.1440, 0.9915, 0.9944, 0.7966, 0.1680, -0.0798},
      {0.9969, 0.0384, 0.9755, 0.9924, 0.7419, 0.0848, -0.0824},
      {0.9985, -0.0466, 0.9869, 0.9934, 0.7614, 0.0240, 0.0057},
      {0.9993, -0.0237, 0.9910, 0.9842, 0.7926, -0.0215, 0.0746},
      {0.9982, -0.0548, 0.9233, 0.9839, 0.7593, -0.0314, 0.0513},
      {0.9977, -0.0568, 0.9643, 0.9859, 0.5141, -0.0365, 0.0669},
      {1.0003, 0.0153, 0.9350, 0.9831, 0.5897, -0.0317, 0.1693},
      {0.9995, -0.0359, 0.9386, 0.9864, 0.5669, -0.0283, 0.2252},
      {0.9993, -0.0549, 0.8361, 0.9827, 0.7962, -0.0291, 0.2127},
      {0.9991, -0.0463, 0.7392, 0.9765, 0.7543, -0.0275, 0.2596},
      {1.0004, -0.0371, 0.5637, 0.9842, 0.6751, -0.0307, 0.3008},
      {0.9965, -0.0235, 0.4023, 0.9800, 0.7868, -0.0384, 0.3147},
      {1.0000, 0.0000, 0.3614, 0.9690, 0.7805, -0.0394, 0.3647},
      {0.9987, -0.0240, 0.2880, 0.9796, 0.7493, -0.0336, 0.4075},
      {1.0005, -0.0260, 0.3414, 0.9835, 0.7606, -0.0203, 0.3403},
      {1.0012, -0.0288, 0.4626, 0.9695, 0.7504, -0.0366, 0.3951},
      {1.0011, -0.0365, 0.5459, 0.9351, 0.6364, -0.0231, 0.3724},
      {1.0008, -0.0353, 0.6902, 0.9578, 0.5482, -0.0097, 0.3227},
      {1.0010, -0.0168, 0.7477, 0.9502, 0.5197, 0.0036, 0.3147},
      {1.0008, 0.0008, 0.7792, 0.9679, 0.6367, 0.0173, 0.3365}};

  // 60 bins of 3 cone's spectral sensitivities on range 400nm to 700nm data from http://www.cvrl.org/
  double LMSsensitivities[bins][3] = {
      {1.879338E-02, 2.589775E-03, 8.508254E-02},
      {4.204986E-02, 5.474207E-03, 1.927065E-01},
      {8.277331E-02, 1.041303E-02, 3.832822E-01},
      {1.395127E-01, 1.712968E-02, 6.568187E-01},
      {2.077647E-01, 2.576133E-02, 9.933444E-01},
      {2.688989E-01, 3.529554E-02, 1.308674E+00},
      {3.281798E-01, 4.698226E-02, 1.624940E+00},
      {3.693084E-01, 6.047429E-02, 1.867751E+00},
      {4.026189E-01, 7.468288E-02, 2.075946E+00},
      {4.042529E-01, 8.820537E-02, 2.132574E+00},
      {3.932139E-01, 1.039030E-01, 2.128264E+00},
      {3.482214E-01, 1.195389E-01, 1.946651E+00},
      {3.013112E-01, 1.414586E-01, 1.768440E+00},
      {2.534221E-01, 1.701373E-01, 1.582342E+00},
      {1.914176E-01, 1.999859E-01, 1.310576E+00},
      {1.283167E-01, 2.312426E-01, 1.010952E+00},
      {7.593120E-02, 2.682271E-01, 7.516389E-01},
      {3.836770E-02, 3.109438E-01, 5.549619E-01},
      {1.400745E-02, 3.554018E-01, 3.978114E-01},
      {3.446810E-03, 4.148227E-01, 2.905816E-01},
      {5.652072E-03, 4.780482E-01, 2.078158E-01},
      {1.561956E-02, 5.491344E-01, 1.394643E-01},
      {3.778185E-02, 6.248296E-01, 8.852389E-02},
      {7.538941E-02, 7.012292E-01, 5.824484E-02},
      {1.201511E-01, 7.788199E-01, 3.784916E-02},
      {1.756832E-01, 8.376358E-01, 2.431375E-02},
      {2.380254E-01, 8.829552E-01, 1.539505E-02},
      {3.046991E-01, 9.233858E-01, 9.753000E-03},
      {3.841856E-01, 9.665325E-01, 6.083223E-03},
      {4.633109E-01, 9.886887E-01, 3.769336E-03},
      {5.374170E-01, 9.907500E-01, 2.323578E-03},
      {6.230892E-01, 9.997775E-01, 1.426627E-03},
      {7.123849E-01, 9.944304E-01, 8.779264E-04},
      {8.016277E-01, 9.848127E-01, 5.408385E-04},
      {8.933408E-01, 9.640545E-01, 3.342429E-04},
      {9.721304E-01, 9.286495E-01, 2.076129E-04},
      {1.034327E+00, 8.775360E-01, 1.298230E-04},
      {1.106886E+00, 8.370838E-01, 8.183954E-05},
      {1.147304E+00, 7.869950E-01, 5.207245E-05},
      {1.160477E+00, 7.272309E-01, 3.347499E-05},
      {1.148163E+00, 6.629035E-01, 2.175998E-05},
      {1.113846E+00, 5.970375E-01, 1.431231E-05},
      {1.048485E+00, 5.282296E-01, 9.530130E-06},
      {9.617111E-01, 4.601308E-01, 6.426776E-06},
      {8.629581E-01, 3.950755E-01, 0.000000E+00},
      {7.603498E-01, 3.351794E-01, 0.000000E+00},
      {6.413984E-01, 2.751807E-01, 0.000000E+00},
      {5.290979E-01, 2.219564E-01, 0.000000E+00},
      {4.323126E-01, 1.776882E-01, 0.000000E+00},
      {3.496358E-01, 1.410203E-01, 0.000000E+00},
      {2.714900E-01, 1.083996E-01, 0.000000E+00},
      {2.056507E-01, 8.137687E-02, 0.000000E+00},
      {1.538163E-01, 6.033976E-02, 0.000000E+00},
      {1.136072E-01, 4.425383E-02, 0.000000E+00},
      {8.281010E-02, 3.211852E-02, 0.000000E+00},
      {5.954815E-02, 2.302574E-02, 0.000000E+00},
      {4.221473E-02, 1.628841E-02, 0.000000E+00},
      {2.948752E-02, 1.136106E-02, 0.000000E+00},
      {2.025590E-02, 7.797457E-03, 0.000000E+00},
      {1.410230E-02, 5.425391E-03, 0.000000E+00}};

protected:
  TMODouble lm;  // luminance multiplier
  TMODouble ari; // adapted retinal illuminance
  TMODouble al;  // average luminance
  TMOInt nob;    // number of bins
};
